
let config = {
  //init
  cellSize: 15,
  // initCells : [2671,2675,2603,2751,2749,2750,2604,2605,4307,4399,6476,4214,4494,4213,4495,6591,6590,7305,7184,6706,7304,7426,3111,3190,3110,2955,2954,8179,8307,8308,8437,6257,6368,6035,5924,6369,6255,5925,6033,1927,8411,8542,4611,8541,3749,3493,4610,2430,4678,2794,4204,8806,8805,3662,3578,9498,11389,4810,3750,3492,14593,2361,4775,11540,9230,13249,501,4234,10212,10474,14763,5008,2292,4874,11847,11541,13743,4421,4326,4153,7402,9360,7403,9095,13412,13578,4433,1160,2594,4235,4514,3512,3414,2284,2360,4776,10921,10199,950,12599,11846,13250,13742,3864,1209,1671,1669,994,9499,1166,3429,3497,14252,15456,1840,4059,5844,6677,7524,7283,7526,6575,9232,2739,2720,4296,5099,14417,570,10354,1963,3531,3889,15110,3265,3667,82,109,11371,84,113,10934,5513,8942,241,196,215,1556,1729,1728,12932,10200,11971,6341,7523,7527,9509,2719,4297,1372,8301,15107,240,1964,439,4529,9097,15284,14934,6039,6246,4042,537,1531,5409,12609,4892,9090,11069,14416,5000,12284,12126,12440,4989,10210,9627,2070,2355,15454,1557,1555,10925,8303,10346,4246,81,2522,2665,2646,4390,11062,3264,3511,3415,3668,10356,10186,5015,2685,8962,4063,1133,1232,7282,3629,3802,4617,569,5618,12452,4340,4793,5091,8558,10338,10774,5821,6134,5203,11972,12600,1216,10499,5957,5956,5573,15285,6454,263,4136,11369,473,4060,5630,7637,7400,7405,6681,11074,6234,6461,1467,72,99,2969,8545,1435,1601,1653,8959,3960,4998,14418,9766,1042,1184,4043,4134,9629,6802,410,3795,195,1465,4792,5090,13094,9768,2071,2006,3869,8692,9089,4322,4416,3263,3344,3584,3669,4338,1163,1211,4616,8046,3596,3332,14422,10213,10330,3978,10782,11079,8961,3973,4337,9088,5304,4623,5092,1159,2523,2740,10628,10920,10342,126,1373,1426,5096,5196,5467,5786,10043,1309,9372,9649,10488,3886,4155,1039,9638,5418,1119,6133,5929,15633,3969,5737,6233,6459,6574,1307,1521,10203,10492,2085,264,5201,4418,14248,14589,3282,10498,1136,1233,3615,3701,14420,5637,5724,9076,127,8432,4341,4625,15460,2423,3184,3754,94,4618,11220,129,5619,13255,194,12771,13256,3368,5850,5958,5848,4791,2008,2135,6235,4898,2521,8561,3958,1262,1312,3446,3613,2152,1231,3630,4133,12293,8690,8822,3362,1315,1367,9488,6919,1718,5316,4227,1659,10778,10926,4509,4700,4798,4997,11521,11674,10050,4716,5743,73,8544,4796,3521,3606,3971,4817,12453,12611,9215,9778,356,1600,1711,8693,9490,2598,2745,1865,1990,4609,9229,9504,9637,4713,4811,14253,14423,567,10069,10500,10620,10766,14936,15109,5009,5218,2613,4325,4419,4062,7281,8827,4432,4992,5193,2452,2667,4513,3597,3331,2216,2422,10627,10057,951,906,995,949,1040,8679,5787,5678,6568,2026,3690,3952,1086,9225,9362,9500,9777,14587,15104,1120,14084,15106,15455,15632,3881,5953,6561,6794,1361,3785,3872,4899,5200,5303,4323,4417,4512,14247,3364,10353,10644,3447,3530,6023,6357,6040,6149,15108,3544,3888,3890,11078,15111,2494,4802,4900,71,114,128,10787,5514,8941,219,287,175,236,12772,10344,5197,5094,4694,4889,7279,7522,9371,9646,9926,1321,1425,8430,4048,603,4435,4624,4721,355,1477,1586,3794,5306,11827,12294,12610,12450,1411,1520,8955,7514,3281,11218,143,9078,6797,9767,6686,1164,1311,1944,2069,2134,4137,2219,15279,15630,5314,5523,8047,10060,3262,3670,8414,8675,4699,4894,1710,10913,11212,6573,5017,5321,3183,3427,3499,3755,1479,10044,10185,1182,1183,5617,12295,12770,8689,10483,10482,3361,3443,9080,5741,6066,5847,1837,4135,9373,3627,3712,3798,3450,5097,2086,11673,304,1207,10061,10204,9782,3046,1382,1434,1544,1658,9639,9919,8826,8958,4800,14249,1088,1135,1234,4225,9491,9769,9909,7038,330,1945,2136,3695,8560,8691,3522,3691,5634,8694,10632,6918,3610,5427,3614,5742,1313,1364,1314,1419,9352,4508,4605,3605],
  // initCells: [],
  initCells:[4317,4410,5892,6587,6001,10208,10066,9924,6246,5891,10065,4132,4223,6473,6358,4409,4133,6247,5783,6586,6824,1488,1601,1543,1658,1489,1657,7179,1261,1211,1593,1260,1376,1311,2267,1724,10909,11208,1723,10762,11059,2335,10766,1665,11207,8702,3705,1783,1788,6670,2452,2331,3879,2334,2403,9344,1390,1848,3374,3129,11521,1744,2263,5176,7410,3792,3791,13742,1787,3942,13743,1742,5158,2381,4483,3625,2374,6845,1521,11839,1337,2522,10936,6958,7282,1669,1863,2262,7757,989,7059,2104,6929,4481,6786,7929,2246,2314,2245,7197,3541,3456,7162,7038,1561,11686,2521,8048,11084,1685,1684,3588,3577,9910,2240,7303,7546,1870,6443,6556,5003,5725,1792,1368,1864,6674,13576,9073,1862,5512,4707,1188,2939,11211,7408,8701,1755,3624,3412,1670,8162,8290,11994,9481,11085,10052,10193,7803,3375,3941,5622,2973,11827,2329,5278,2288,7660,3576,1577,1749,6497,2974,1001,7048,8021,8825,4479,2571,2325,1674,4804,5280,8566,1618,1676,6707,6940,10913,11830,7287,8696,6963,7799,2226,2294,9208,9909,6841,6959,8183,10924,4568,3050,12928,2787,4517,5382,7533,1815,4976,2502,2647,7785,3763,2461,2534,2677,4032,6441,3492,3594,8293,4981,3673,3848,2308,2788,7020,5261,5364,7286,8022,8148,4576,4298,4579,8540,5107,6790,3508,11840,10774,11234,3579,1289,1339,3852,11071,12925,13248,7146,7632,14081,5517,3855,1140,8569,3423,6688,6499,6612,1122,4300,4195,1852,5832,1316,10921,4111,5707,5617,4863,7780,1559,1236,6457,12607,4203,6119,6708,7178,1977,2040,11063,11514,10620,10186,6554,1124,1221,13910,11984,9620,1391,7425,5578,5685,4569,13252,13088,11673,1098,5074,7168,4031,1576,8421,8552,1808,1931,5057,2540,12769,4293,2303,2442,3590,3849,5498,3509,6846,1235,7196,7042,7161,4858,5390,5816,3838,1340,10776,4902,5103,900,985,7882,1937,5474,988,2646,5394,958,957,8430,8692,2427,2356,11983,11982,2096,2257,2394,2610,1397,1450,4516,4611,6689,8175,3589,3503,6385,6614,5178,5383,944,4033,2174,7063,7423,6558,1369,4202,7801,12604,12764,9209,1216,3491,1139,1187,3095,6706,3330,3497,4962,8962,5308,5516,3506,5166,5373,4778,10775,6384,2678,1341,6687,4567,1854,2865,1051,4518,2467,5204,2648,5209,6611,3211,4883,3847,2446,3097,1046,6257,7069,8277,4575,12447,6009,6233,6460,1673,7267,14082,8306,8436,8565,5831,5163,8303,2362,3851,2603,2676,7027,3424,11070,6343,6592,7299,1483,1537,1429,1482,11213,10615,10621,10915,9902,10044,10911,10764,8703,2400,1079,1126,13250,13413,9072,9207,9343,1750,1932,7670,7921,3292,3373,3130,11219,5175,7289,7411,13412,13909,4122,3679,1691,10337,10482,10627,10773,5159,5260,2237,4388,2375,2444,2443,5604,5710,5817,4957,5160,1222,3839,9757,1031,1076,7633,7883,7756,5472,7058,2105,2039,2169,11513,6930,6906,6785,4677,2496,2643,6920,7157,2683,13255,1506,1562,8176,8047,8304,8037,3504,3587,3937,3493,3662,901,2241,1876,1936,7183,7545,7669,6330,6444,6328,13583,13581,5004,902,5833,1791,6559,7677,7926,8538,13411,8938,4784,5407,4515,4610,4706,1189,3016,3331,3581,7531,7905,8312,8180,8438,5309,3495,7924,2161,2160,5270,5372,12768,10039,1396,1449,4206,4394,3940,4030,4472,2897,11828,11981,2397,2289,14248,3408,3768,5311,6383,6727,2975,8553,5082,5600,5815,7658,7782,7907,3176,1002,956,1047,1093,8693,8958,5066,4296,3494,4385,4384,2258,2324,2393,2463,1121,1168,1239,1290,3175,5076,5384,13915,14250,8697,12291,1735,9901,5062,11676,11985,11829,8564,8829,8695,8828,8433,2432,1220,14078,4973,10777,12767,4613,4612,4681,4876,2503,2575,2574,3764,2323,2392,2532,2531,2605,2604,3593,5266,5263,1930,12770,6370,6950,2441,4768,6792,4580,5007,5208,7026,3425,10628,4566,4662,6234,6345,6458,10325,1393,1392,899,3131,4380,3422,2609,10618,6572,8050,8305,6386,1170,1915,1318,6120,6344,6230,4864,1615,1138,1186,6571,6827,10330,8178,8307,1032,5686,4474,1006,1052,1097,1145,8551,8407,3505,5289,5499,6806,6923,5186,5307,4485,6690,1035,1081],

  //Speed
  frameRate: 60,

  //background
  backgroundColor: 22,

  //Cell
  initialSize: 1,
  thresholdSizeMax: 30,
  finalSizeMin: 1,
  finalSizeMax: 20,
  speedOfGrowthMin: 0.2,
  speedOfGrowthMax: 1,
  strokeWeightMin: 1,
  strokeWeightMax: 10,
  colors: ["f8f9fa","e9ecef","dee2e6","ced4da","adb5bd","6c757d","495057","343a40","212529"],
}

var cycling;
var cycleSpeed;
var livingCells;
var livingCellsConfig;
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
function getRandomFloat(min, max) {
  return Math.random() * (max - min) + min;
}

class CellConfig {
  constructor() {
    this.size = config.initialSize;
    this.shouldGrow = true;

    this.thresholdSize = getRandomInt(this.size, config.thresholdSizeMax);
    this.finalSize = getRandomInt(config.finalSizeMin,config.finalSizeMax);
    this.speedOfGrowth = getRandomFloat(config.speedOfGrowthMin, config.speedOfGrowthMax)

    this.strokeColor = config.colors[getRandomInt(0,config.colors.length -1)];
    this.strokeWeight = getRandomInt(config.strokeWeightMin, config.strokeWeightMax);
  }

  updateSize() {
    if (this.shouldGrow) {
      this.size = this.size + this.speedOfGrowth;
      if (this.size >= this.thresholdSize) this.shouldGrow = false;
    } else if (this.size > this.finalSize) {
      this.size = this.size - this.speedOfGrowth;
    }
  }
}


function setup() {
  createCanvas(windowWidth, windowHeight);
  cycling = 0
  cycleSpeed = 120
  livingCells = new Set()
  livingCellsConfig = new Map()

  config.initCells.forEach(cell => {
    livingCells.add(cell)
    livingCellsConfig.set(cell,new CellConfig())
  })
  frameRate(config.frameRate)
}

function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
}

function cycle(){
  cycling++
  if (cycleSpeed !== 0 && cycling % cycleSpeed !== 0) return;
  cycling = 0
  calculateNextLivingCells()
}

function cantor(x,y) {
  return (0.5 * (x + y) * (x + y + 1)) + y;
}

function uncantor(z){
  let t = Math.floor((-1 + Math.sqrt(1 + 8 * z)) / 2);
  let x = t * (t + 3) / 2 - z;
  let y = z - t * (t + 1) / 2;
  return {x: x, y: y};
}

function neighbours(cell){
  let {x, y} = uncantor(cell)
  let neighbours = []

  for (let i = -1; i <= 1; i++) {
    for (let j = -1; j <= 1; j++) {
      if (i === 0 && j === 0) continue
      neighbours.push(cantor(x+i,y+j))
    }
  }
  return neighbours
}

function deadNeighbours(cell){
  let ng= neighbours(cell)
  let intersect = new Set([...ng].filter(i => !livingCells.has(i)));
  return intersect
}

function aliveNeighbours(cell){
  let ng = neighbours(cell)
  let intersect = new Set([...ng].filter(i => livingCells.has(i)));
  return intersect
}

function neighboursDeadCells() {
  let deadCells = new Set()
  livingCells.forEach(cell => {
    deadNeighbours(cell).forEach(dn => deadCells.add(dn))
  })
  return deadCells
}

function calculateNextLivingCells() {
  let newLivingCells = new Set()
  let newLivingCellsConfig = new Map()
  let deadCells = neighboursDeadCells()

  livingCells.forEach((cell) => {
    let nbrOfAliveNeighbours = aliveNeighbours(cell).size
    if (nbrOfAliveNeighbours === 2 || nbrOfAliveNeighbours === 3) {
      newLivingCells.add(cell)
      newLivingCellsConfig.set(cell, new CellConfig())
    }
  })

  deadCells.forEach((cell) => {
    let nbrOfAliveNeighbours = aliveNeighbours(cell).size
    if (nbrOfAliveNeighbours === 3){
        newLivingCells.add(cell)
        newLivingCellsConfig.set(cell, new CellConfig())
    }
  })

  livingCells = newLivingCells
  livingCellsConfig = newLivingCellsConfig
}
function displayCell(cell){
  let {x,y} = uncantor(cell)
  let cellConfig = livingCellsConfig.get(cell)
  strokeWeight(cellConfig.strokeWeight);
  stroke("#" + cellConfig.strokeColor);
  noFill()
  cellConfig.updateSize()
  rectMode(CENTER)
  rect(x * config.cellSize, y * config.cellSize, cellConfig.size, cellConfig.size);
}

function draw() {
  background(config.backgroundColor)
  livingCells.forEach(cell => displayCell(cell))
  cycle()
}
function mouseDragged() {
  let x = Math.round(mouseX/config.cellSize);
  let y = Math.round(mouseY/config.cellSize);
  let cell = cantor(x,y)
  livingCells.add(cell);
  livingCellsConfig.set(cell,new CellConfig())
}

